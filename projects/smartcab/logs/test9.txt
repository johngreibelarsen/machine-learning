def perceptronStep(X, y, W, b, learn_rate = 0.01):
    # Fill in code
    #print("Predicition: {}".format(prediction(X, W, b)))
    #print("X value: {}".format(X))
    #print("y value: {}".format(y))
    #print("W value: {}".format(W))
    #print("b value: {}".format(b))
    
    for i in range(len(y)):
        print("Arguments X[i]: {}; W value: {}; b value: {}".format(X[i], W, b))
        functionValue = prediction(X[i], W, b)
        yValue = stepFunction(y[i])
        print("function value: {}; y value: {}".format(functionValue, yValue))
        if(functionValue < yValue): # classified as negative but lable positive
            print("Value W0 before".format(W[0]))
            W[0] = W[0] + learn_rate*X[i][0]
            print("Value W0 after".format(W[0]))
            W[1] = W[1] + learn_rate*X[i][1]
            b = b + learn_rate  
        elif(functionValue > yValue): # classified as positive but lable negative
            W[0] = W[0] - learn_rate*X[i][0]
            W[1] = W[1] - learn_rate*X[i][1]
            b = b - learn_rate  
        
    return W, b